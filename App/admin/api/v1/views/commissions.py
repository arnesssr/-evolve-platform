from django.views import View
from django.http import JsonResponse, HttpResponseBadRequest
from django.utils import timezone
import json
from decimal import Decimal

from App.reseller.earnings.services.commission_service import CommissionService
from App.reseller.earnings.models import Reseller


class AdminCommissionCreateAPI(View):
    """
    Create commission entries for a single reseller or all resellers.
    Expects JSON body with fields:
    - transaction_reference (str, optional; autogenerated if missing)
    - client_name (str, optional)
    - client_email (str, optional)
    - product_name (str, optional)
    - product_type (str, optional)
    - sale_amount (number, required)
    - commission_rate (number, required)
    - reseller_id (int, required if apply_all is False)
    - apply_all (bool, optional; default False)
    """

    def post(self, request):
        try:
            payload = json.loads(request.body.decode('utf-8')) if request.body else {}
        except Exception:
            return HttpResponseBadRequest('Invalid JSON body')

        sale_amount = payload.get('sale_amount')
        commission_rate = payload.get('commission_rate')
        apply_all = bool(payload.get('apply_all') or False)
        reseller_id = payload.get('reseller_id')

        # Basic validation
        if sale_amount is None or commission_rate is None:
            return HttpResponseBadRequest('sale_amount and commission_rate are required')

        # Normalize numbers
        try:
            sale_amount = Decimal(str(sale_amount))
            commission_rate = Decimal(str(commission_rate))
        except Exception:
            return HttpResponseBadRequest('sale_amount and commission_rate must be numbers')

        tx_ref = payload.get('transaction_reference')
        if not tx_ref:
            ts = timezone.now().strftime('%Y%m%d%H%M%S')
            tx_ref = f"manual-{ts}"

        svc = CommissionService()

        created = 0
        errors = []

        if apply_all:
            qs = Reseller.objects.all()
            for r in qs.iterator():
                try:
                    svc.create_commission({
                        'reseller': r,
                        'sale_amount': sale_amount,
                        'commission_rate': commission_rate,
                        'transaction_reference': f"{tx_ref}-{r.id}",
                        'client_name': payload.get('client_name', ''),
                        'client_email': payload.get('client_email', ''),
                        'product_name': payload.get('product_name', ''),
                        'product_type': payload.get('product_type', ''),
                    })
                    created += 1
                except Exception as e:
                    errors.append(str(e))
        else:
            if not reseller_id:
                return HttpResponseBadRequest('reseller_id is required when apply_all is false')
            try:
                r = Reseller.objects.get(id=int(reseller_id))
            except Reseller.DoesNotExist:
                return HttpResponseBadRequest('Reseller not found')
            try:
                svc.create_commission({
                    'reseller': r,
                    'sale_amount': sale_amount,
                    'commission_rate': commission_rate,
                    'transaction_reference': tx_ref,
                    'client_name': payload.get('client_name', ''),
                    'client_email': payload.get('client_email', ''),
                    'product_name': payload.get('product_name', ''),
                    'product_type': payload.get('product_type', ''),
                })
                created = 1
            except Exception as e:
                errors.append(str(e))

        return JsonResponse({'success': (errors == []), 'created': created, 'errors': errors})
